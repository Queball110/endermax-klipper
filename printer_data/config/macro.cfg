[gcode_macro PRINT_START]

gcode:



  
   # {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    #{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
        # Start bed heating
    #M140 S{BED_TEMP}
 
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    #SET_GCODE_OFFSET Z=0.0
    # Home the printer
   # G28
     G28  
    G92 X21.20 Y18  ; do the coarse home
    G90                        ; set absolute positioning
    G0 Z2 F1000                ; to 2mm -- home height (or whatever you'd like), for maximum sensor accuracy
    G4 S2               ; chill for a sec
    M400                       ; wait for move to finish
    PROBE_EDDY_NG_PROBE_STATIC HOME_Z=1 ; read the current exact height from sensor and home Z to it
    G0 Z5 F1000 ; to 5mm as home
    

    #BTT_BED_MESH_CALIBRATE METHOD=rapid_scan


  BED_MESH_CALIBRATE SCAN_MODE=rapid METHOD=scan ADAPTIVE=1
  #BED_MESH_CALIBRATE SCAN_MODE=rapid METHOD=scan
    #BED_MESH_PROFILE LOAD=default
     # BED_MESH_CALIBRATE
    #LOAD= default METHOD= automatic
    #Move the nozzle near the bed
    G1 Z5 F3000
    # Move the nozzle very close to the bed
    G1 Z0.15 F300
    # Wait for bed to reach temperature
    #M190 S{BED_TEMP}
      # Set and wait for nozzle to reach temperature

      
# # # Klipper Adaptive Purging - Line # # #

# This macro will parse information from objects in your gcode and create a nearby purge!
# For successful purging, you may need to configure:
# 
# [extruder]
# ...
# max_extrude_cross_section: 5

[gcode_macro LINE_PURGE]
description: A purge macro that adapts to be near your actual printed objects

variable_adaptive_enable: True      # Change to False if you'd like the purge to be in the same spot every print
variable_z_height: 0.4              # Height above the bed to purge
variable_purge_amount: 20           # Amount of filament in millimeters to purge
variable_line_length: 40            # Overall desired length of purge line in millimeters, around 1/5th of X axis length is a good starting value
variable_flow_rate: 12              # Desired flow rate in mm3/s (Around 12 for standard flow hotends, around 24 for high flow hotends)
variable_x_default: 15             # Default X location to purge. If adaptive_enable is True, this is overwritten
variable_y_default: 15            # Default Y location to purge. If adaptive_enable is True, this is overwritten
variable_distance_to_object_y: 30   # Y distance in millimeters away from the print area for purging. Must be less than or equal to y_default if adaptive_enable is False

### This section is for those who are using Moonraker's Update Manager for KAMP, or want a more verbose macro. ###

variable_display_parameters: True   # Display macro paramters in the console, useful for debugging the SETUP_LINE_PURGE call, or more verbosity.

gcode:

    {% if display_parameters == True %}
      { action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }
      { action_respond_info("z_height        : %f" % (z_height))  }
      { action_respond_info("purge_amount    : %f" % (purge_amount))  }
      { action_respond_info("line_length     : %f" % (line_length))  }
      { action_respond_info("flow_rate       : %f" % (flow_rate))  }
      { action_respond_info("x_default       : %f" % (x_default))  }
      { action_respond_info("y_default       : %f" % (y_default))  }
      { action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }
    {% endif %}

    {% if adaptive_enable == True %}
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
        {% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}
        {% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}
        {% set x_origin = ([x_origin, 0] | max) %}
        {% set y_origin = ([y_origin, 0] | max) %}
    {% else %}
        {% set x_origin = x_default | float %}
        {% set y_origin = y_default | float %}
    {% endif %}
    {% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}
    {% set cross_section = nozzle_dia * z_height | float %}
    {% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}

    G92 E0                                                                              # Reset extruder
    G0 F{travel_speed}                                                                  # Set travel speed
    G90                                                                                 # Absolute positioning
    G0 X{x_origin} Y{y_origin - distance_to_object_y}                                   # Move to purge position
    G0 Z{z_height}                                                                      # Move to purge Z height
    M83                                                                                 # Relative extrusion mode
    G1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}                    # Purge line
    G1 E-.5 F2100                                                                       # Retract
    G92 E0                                                                              # Reset extruder distance
    M82                                                                                 # Absolute extrusion mode
    G0 Z{z_height * 2} F{travel_speed}                                                  # Z hop

[gcode_macro SETUP_LINE_PURGE]
gcode:
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}
 
   
   #M109 S{EXTRUDER_TEMP}
    #G1 X20.1 Y30 Z0.3 F5000.0 # Move to start position
    #G1 X20.1 Y200.0 Z0.3 F1500.0 E15 # Draw the first line
    #G1 X21.4 Y200.0 Z0.3 F5000.0 # Move to side a little
    #G1 X21.4 Y30 Z0.3 F1500.0 E30 # Draw the second line
    #G92 E0 # Reset Extruder
    #G1 Z2.0 F3000 # Move Z Axis up little to prevent scratching of Heat Bed
    #G1 X55 Y25 Z0.3 F5000.0 # Move over to prevent blob squish
    
    
[gcode_macro PRINT_END]
gcode:

 G1 E-.5 F1500 ; Retract
  G1 E0 F1000 ; reset extrude
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-50 Y-50 E-3 F300
     #Raise nozzle by 10mm
    G1 Z20 F3000
    G90
    # Disable steppers
    M84 X Y E
    PROBE_EDDY_NG_SET_TAP_OFFSET VALUE=0


  #M117 READY

#G1 E-.5 F1500 ; Retract
 # G1 E0 F1000 ; reset extruder

  #G91 ; Relative positioning
  #G1 Z2 ; lift nozzle 
  #G1 Y300 F2000; Present Print
  #G1 Z340 F5000 ; lift nozzle to prep for next G34

  #G90 ; absolute positioning
  #G27 P2 ; park extruder

  #M140 S0 ; turn off heatbed
  #M104 S0 ; turn off temperature
  #M107 ; turn off fan
  #M84 X Y E ; disable motors
  

[gcode_macro PIDtuneHOTEND]
gcode:
	{% set TEMP = params.TEMP|default(200)|float %}
	PID_CALIBRATE HEATER=extruder TARGET={TEMP}

[gcode_macro PIDtuneBED]
gcode:
    {% set TEMP = params.TEMP|default(60)|float %}
 PID_CALIBRATE HEATER=heater_bed TARGET={TEMP}

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

    [gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

